package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig  {
	
	//passwordEncoder => 5
	//createDelegatingPasswordEncoder
	
	
	//SecurityFilterChanin 객체로 설정
	
	//AuthenticationManager 객체로 설정
	
	@Bean
	PasswordEncoder passwordEncoder() {
		return PasswordEncoderFactories.createDelegatingPasswordEncoder();
	}
	
	//SecurityFilterChain 객체로 설정
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) {
		return http.csrf(csrf-> csrf.disable())
				.authorizeHttpRequests(authorize -> 
				authorize.requestMatchers("/","/js/**","/dist/**","/board/list","/member/login","/member/register",
						"/comment/**","/upload/**").permitAll()
				.requestMatchers("/member/list").hasAnyRole("ADMIN"));
	}

}
